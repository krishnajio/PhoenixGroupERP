'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("trial4day"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class trial4day
    Inherits System.Data.DataSet
    
    Private tabletmpTrial4date As tmpTrial4dateDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tmpTrial4date")) Is Nothing) Then
                MyBase.Tables.Add(New tmpTrial4dateDataTable(ds.Tables("tmpTrial4date")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tmpTrial4date() As tmpTrial4dateDataTable
        Get
            Return Me.tabletmpTrial4date
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As trial4day = CType(MyBase.Clone,trial4day)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tmpTrial4date")) Is Nothing) Then
                MyBase.Tables.Add(New tmpTrial4dateDataTable(ds.Tables("tmpTrial4date")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletmpTrial4date = CType(MyBase.Tables("tmpTrial4date"),tmpTrial4dateDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletmpTrial4date) Is Nothing) Then
                Me.tabletmpTrial4date.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "trial4day"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/trial4day.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletmpTrial4date = New tmpTrial4dateDataTable
        MyBase.Tables.Add(Me.tabletmpTrial4date)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetmpTrial4date() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As trial4day = New trial4day
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub tmpTrial4dateRowChangeEventHandler(ByVal sender As Object, ByVal e As tmpTrial4dateRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tmpTrial4dateDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnaccount_code As System.Data.DataColumn
        
        Private columnaccount_head_name As System.Data.DataColumn
        
        Private columnodr As System.Data.DataColumn
        
        Private columnocr As System.Data.DataColumn
        
        Private column1dr As System.Data.DataColumn
        
        Private column1cr As System.Data.DataColumn
        
        Private column2dr As System.Data.DataColumn
        
        Private column2cr As System.Data.DataColumn
        
        Private column3dr As System.Data.DataColumn
        
        Private column3cr As System.Data.DataColumn
        
        Private columnUname As System.Data.DataColumn
        
        Private columnid As System.Data.DataColumn
        
        Private columngrpname As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tmpTrial4date"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property account_codeColumn() As System.Data.DataColumn
            Get
                Return Me.columnaccount_code
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property account_head_nameColumn() As System.Data.DataColumn
            Get
                Return Me.columnaccount_head_name
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property odrColumn() As System.Data.DataColumn
            Get
                Return Me.columnodr
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ocrColumn() As System.Data.DataColumn
            Get
                Return Me.columnocr
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1drColumn() As System.Data.DataColumn
            Get
                Return Me.column1dr
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _1crColumn() As System.Data.DataColumn
            Get
                Return Me.column1cr
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2drColumn() As System.Data.DataColumn
            Get
                Return Me.column2dr
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _2crColumn() As System.Data.DataColumn
            Get
                Return Me.column2cr
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _3drColumn() As System.Data.DataColumn
            Get
                Return Me.column3dr
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _3crColumn() As System.Data.DataColumn
            Get
                Return Me.column3cr
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnameColumn() As System.Data.DataColumn
            Get
                Return Me.columnUname
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property idColumn() As System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property grpnameColumn() As System.Data.DataColumn
            Get
                Return Me.columngrpname
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tmpTrial4dateRow
            Get
                Return CType(Me.Rows(index),tmpTrial4dateRow)
            End Get
        End Property
        
        Public Event tmpTrial4dateRowChanging As tmpTrial4dateRowChangeEventHandler
        
        Public Event tmpTrial4dateRowChanged As tmpTrial4dateRowChangeEventHandler
        
        Public Event tmpTrial4dateRowDeleting As tmpTrial4dateRowChangeEventHandler
        
        Public Event tmpTrial4dateRowDeleted As tmpTrial4dateRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtmpTrial4dateRow(ByVal row As tmpTrial4dateRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtmpTrial4dateRow(ByVal account_code As String, ByVal account_head_name As String, ByVal odr As Decimal, ByVal ocr As Decimal, ByVal _1dr As Decimal, ByVal _1cr As Decimal, ByVal _2dr As Decimal, ByVal _2cr As Decimal, ByVal _3dr As Decimal, ByVal _3cr As Decimal, ByVal Uname As String, ByVal grpname As String) As tmpTrial4dateRow
            Dim rowtmpTrial4dateRow As tmpTrial4dateRow = CType(Me.NewRow,tmpTrial4dateRow)
            rowtmpTrial4dateRow.ItemArray = New Object() {account_code, account_head_name, odr, ocr, _1dr, _1cr, _2dr, _2cr, _3dr, _3cr, Uname, Nothing, grpname}
            Me.Rows.Add(rowtmpTrial4dateRow)
            Return rowtmpTrial4dateRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As tmpTrial4dateDataTable = CType(MyBase.Clone,tmpTrial4dateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New tmpTrial4dateDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnaccount_code = MyBase.Columns("account_code")
            Me.columnaccount_head_name = MyBase.Columns("account_head_name")
            Me.columnodr = MyBase.Columns("odr")
            Me.columnocr = MyBase.Columns("ocr")
            Me.column1dr = MyBase.Columns("1dr")
            Me.column1cr = MyBase.Columns("1cr")
            Me.column2dr = MyBase.Columns("2dr")
            Me.column2cr = MyBase.Columns("2cr")
            Me.column3dr = MyBase.Columns("3dr")
            Me.column3cr = MyBase.Columns("3cr")
            Me.columnUname = MyBase.Columns("Uname")
            Me.columnid = MyBase.Columns("id")
            Me.columngrpname = MyBase.Columns("grpname")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnaccount_code = New System.Data.DataColumn("account_code", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccount_code)
            Me.columnaccount_head_name = New System.Data.DataColumn("account_head_name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccount_head_name)
            Me.columnodr = New System.Data.DataColumn("odr", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnodr)
            Me.columnocr = New System.Data.DataColumn("ocr", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnocr)
            Me.column1dr = New System.Data.DataColumn("1dr", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.column1dr.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_1dr")
            Me.column1dr.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_1drColumn")
            Me.column1dr.ExtendedProperties.Add("Generator_UserColumnName", "1dr")
            MyBase.Columns.Add(Me.column1dr)
            Me.column1cr = New System.Data.DataColumn("1cr", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.column1cr.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_1cr")
            Me.column1cr.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_1crColumn")
            Me.column1cr.ExtendedProperties.Add("Generator_UserColumnName", "1cr")
            MyBase.Columns.Add(Me.column1cr)
            Me.column2dr = New System.Data.DataColumn("2dr", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.column2dr.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_2dr")
            Me.column2dr.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_2drColumn")
            Me.column2dr.ExtendedProperties.Add("Generator_UserColumnName", "2dr")
            MyBase.Columns.Add(Me.column2dr)
            Me.column2cr = New System.Data.DataColumn("2cr", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.column2cr.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_2cr")
            Me.column2cr.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_2crColumn")
            Me.column2cr.ExtendedProperties.Add("Generator_UserColumnName", "2cr")
            MyBase.Columns.Add(Me.column2cr)
            Me.column3dr = New System.Data.DataColumn("3dr", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.column3dr.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_3dr")
            Me.column3dr.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_3drColumn")
            Me.column3dr.ExtendedProperties.Add("Generator_UserColumnName", "3dr")
            MyBase.Columns.Add(Me.column3dr)
            Me.column3cr = New System.Data.DataColumn("3cr", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.column3cr.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_3cr")
            Me.column3cr.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_3crColumn")
            Me.column3cr.ExtendedProperties.Add("Generator_UserColumnName", "3cr")
            MyBase.Columns.Add(Me.column3cr)
            Me.columnUname = New System.Data.DataColumn("Uname", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUname)
            Me.columnid = New System.Data.DataColumn("id", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columngrpname = New System.Data.DataColumn("grpname", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrpname)
            Me.columnaccount_code.MaxLength = 50
            Me.columnaccount_head_name.MaxLength = 50
            Me.columnUname.MaxLength = 50
            Me.columnid.AutoIncrement = true
            Me.columnid.AllowDBNull = false
            Me.columnid.ReadOnly = true
            Me.columngrpname.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtmpTrial4dateRow() As tmpTrial4dateRow
            Return CType(Me.NewRow,tmpTrial4dateRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New tmpTrial4dateRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(tmpTrial4dateRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tmpTrial4dateRowChangedEvent) Is Nothing) Then
                RaiseEvent tmpTrial4dateRowChanged(Me, New tmpTrial4dateRowChangeEvent(CType(e.Row,tmpTrial4dateRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tmpTrial4dateRowChangingEvent) Is Nothing) Then
                RaiseEvent tmpTrial4dateRowChanging(Me, New tmpTrial4dateRowChangeEvent(CType(e.Row,tmpTrial4dateRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tmpTrial4dateRowDeletedEvent) Is Nothing) Then
                RaiseEvent tmpTrial4dateRowDeleted(Me, New tmpTrial4dateRowChangeEvent(CType(e.Row,tmpTrial4dateRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tmpTrial4dateRowDeletingEvent) Is Nothing) Then
                RaiseEvent tmpTrial4dateRowDeleting(Me, New tmpTrial4dateRowChangeEvent(CType(e.Row,tmpTrial4dateRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetmpTrial4dateRow(ByVal row As tmpTrial4dateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As trial4day = New trial4day
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tmpTrial4dateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tmpTrial4dateRow
        Inherits System.Data.DataRow
        
        Private tabletmpTrial4date As tmpTrial4dateDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletmpTrial4date = CType(Me.Table,tmpTrial4dateDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property account_code() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date.account_codeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'account_code' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date.account_codeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property account_head_name() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date.account_head_nameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'account_head_name' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date.account_head_nameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property odr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date.odrColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'odr' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date.odrColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ocr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date.ocrColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'ocr' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date.ocrColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1dr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date._1drColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column '1dr' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date._1drColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _1cr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date._1crColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column '1cr' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date._1crColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2dr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date._2drColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column '2dr' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date._2drColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _2cr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date._2crColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column '2cr' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date._2crColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _3dr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date._3drColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column '3dr' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date._3drColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _3cr() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date._3crColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column '3cr' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date._3crColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Uname() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date.UnameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Uname' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date.UnameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id() As Long
            Get
                Return CType(Me(Me.tabletmpTrial4date.idColumn),Long)
            End Get
            Set
                Me(Me.tabletmpTrial4date.idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grpname() As String
            Get
                Try 
                    Return CType(Me(Me.tabletmpTrial4date.grpnameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'grpname' in table 'tmpTrial4date' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletmpTrial4date.grpnameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaccount_codeNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date.account_codeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaccount_codeNull()
            Me(Me.tabletmpTrial4date.account_codeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isaccount_head_nameNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date.account_head_nameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setaccount_head_nameNull()
            Me(Me.tabletmpTrial4date.account_head_nameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsodrNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date.odrColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetodrNull()
            Me(Me.tabletmpTrial4date.odrColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsocrNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date.ocrColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetocrNull()
            Me(Me.tabletmpTrial4date.ocrColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1drNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date._1drColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1drNull()
            Me(Me.tabletmpTrial4date._1drColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_1crNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date._1crColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_1crNull()
            Me(Me.tabletmpTrial4date._1crColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2drNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date._2drColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2drNull()
            Me(Me.tabletmpTrial4date._2drColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_2crNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date._2crColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_2crNull()
            Me(Me.tabletmpTrial4date._2crColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_3drNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date._3drColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_3drNull()
            Me(Me.tabletmpTrial4date._3drColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_3crNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date._3crColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_3crNull()
            Me(Me.tabletmpTrial4date._3crColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnameNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date.UnameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnameNull()
            Me(Me.tabletmpTrial4date.UnameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsgrpnameNull() As Boolean
            Return Me.IsNull(Me.tabletmpTrial4date.grpnameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetgrpnameNull()
            Me(Me.tabletmpTrial4date.grpnameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tmpTrial4dateRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As tmpTrial4dateRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tmpTrial4dateRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tmpTrial4dateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace trial4dayTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tmpTrial4dateTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tmpTrial4date"
            tableMapping.ColumnMappings.Add("account_code", "account_code")
            tableMapping.ColumnMappings.Add("account_head_name", "account_head_name")
            tableMapping.ColumnMappings.Add("odr", "odr")
            tableMapping.ColumnMappings.Add("ocr", "ocr")
            tableMapping.ColumnMappings.Add("1dr", "1dr")
            tableMapping.ColumnMappings.Add("1cr", "1cr")
            tableMapping.ColumnMappings.Add("2dr", "2dr")
            tableMapping.ColumnMappings.Add("2cr", "2cr")
            tableMapping.ColumnMappings.Add("3dr", "3dr")
            tableMapping.ColumnMappings.Add("3cr", "3cr")
            tableMapping.ColumnMappings.Add("Uname", "Uname")
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("grpname", "grpname")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tmpTrial4date] ([account_code], [account_head_name], [odr], [o"& _ 
                "cr], [1dr], [1cr], [2dr], [2cr], [3dr], [3cr], [Uname], [grpname]) VALUES (@acco"& _ 
                "unt_code, @account_head_name, @odr, @ocr, @p1, @p4, @p7, @p10, @p13, @p16, @Unam"& _ 
                "e, @grpname)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@account_code", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "account_code", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@account_head_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "account_head_name", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@odr", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "odr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ocr", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "ocr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@p1", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "1dr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@p4", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 3, "1cr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@p7", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "2dr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@p10", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "2cr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@p13", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "3dr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@p16", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "3cr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Uname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Uname", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@grpname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "grpname", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            'Me._connection.ConnectionString = Global.PhoenixGroups.My.MySettings.Default.RagaGroupConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT account_code, account_head_name, odr, ocr, [1dr], [1cr], [2dr], [2cr], [3d"& _ 
                "r], [3cr], Uname, id, grpname FROM dbo.tmpTrial4date"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As trial4day.tmpTrial4dateDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As trial4day.tmpTrial4dateDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As trial4day.tmpTrial4dateDataTable = New trial4day.tmpTrial4dateDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As trial4day.tmpTrial4dateDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As trial4day) As Integer
            Return Me.Adapter.Update(dataSet, "tmpTrial4date")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal account_code As String, ByVal account_head_name As String, ByVal odr As System.Nullable(Of Decimal), ByVal ocr As System.Nullable(Of Decimal), ByVal p1 As System.Nullable(Of Decimal), ByVal p4 As System.Nullable(Of Decimal), ByVal p7 As System.Nullable(Of Decimal), ByVal p10 As System.Nullable(Of Decimal), ByVal p13 As System.Nullable(Of Decimal), ByVal p16 As System.Nullable(Of Decimal), ByVal Uname As String, ByVal grpname As String) As Integer
            If (account_code Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(account_code,String)
            End If
            If (account_head_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(account_head_name,String)
            End If
            If (odr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(odr.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (ocr.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ocr.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (p1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(p1.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (p4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(p4.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (p7.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (p10.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(p10.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (p13.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(p13.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (p16.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(p16.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (Uname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Uname,String)
            End If
            If (grpname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(grpname,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
