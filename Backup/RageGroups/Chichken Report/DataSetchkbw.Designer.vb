'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DataSetchkbw"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetchkbw
    Inherits System.Data.DataSet
    
    Private tablebwrepfun As bwrepfunDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("bwrepfun")) Is Nothing) Then
                MyBase.Tables.Add(New bwrepfunDataTable(ds.Tables("bwrepfun")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property bwrepfun() As bwrepfunDataTable
        Get
            Return Me.tablebwrepfun
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DataSetchkbw = CType(MyBase.Clone,DataSetchkbw)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("bwrepfun")) Is Nothing) Then
                MyBase.Tables.Add(New bwrepfunDataTable(ds.Tables("bwrepfun")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablebwrepfun = CType(MyBase.Tables("bwrepfun"),bwrepfunDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebwrepfun) Is Nothing) Then
                Me.tablebwrepfun.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetchkbw"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetchkbw.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablebwrepfun = New bwrepfunDataTable
        MyBase.Tables.Add(Me.tablebwrepfun)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializebwrepfun() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetchkbw = New DataSetchkbw
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub bwrepfunRowChangeEventHandler(ByVal sender As Object, ByVal e As bwrepfunRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class bwrepfunDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private _columnPur__BatchNo As System.Data.DataColumn
        
        Private columnItemName As System.Data.DataColumn
        
        Private _columnPur__Qty As System.Data.DataColumn
        
        Private _columnPur__Nos As System.Data.DataColumn
        
        Private columnPur_Rate As System.Data.DataColumn
        
        Private _columnPur__Amount As System.Data.DataColumn
        
        Private columnSale_BatchNo As System.Data.DataColumn
        
        Private columnSale_Item As System.Data.DataColumn
        
        Private columnSale_Qty As System.Data.DataColumn
        
        Private columnSale_No As System.Data.DataColumn
        
        Private columnSale_Rate As System.Data.DataColumn
        
        Private columnSale_Amount As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "bwrepfun"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Pur__BatchNoColumn() As System.Data.DataColumn
            Get
                Return Me._columnPur__BatchNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Pur__QtyColumn() As System.Data.DataColumn
            Get
                Return Me._columnPur__Qty
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Pur__NosColumn() As System.Data.DataColumn
            Get
                Return Me._columnPur__Nos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pur_RateColumn() As System.Data.DataColumn
            Get
                Return Me.columnPur_Rate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _Pur__AmountColumn() As System.Data.DataColumn
            Get
                Return Me._columnPur__Amount
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sale_BatchNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSale_BatchNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sale_ItemColumn() As System.Data.DataColumn
            Get
                Return Me.columnSale_Item
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sale_QtyColumn() As System.Data.DataColumn
            Get
                Return Me.columnSale_Qty
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sale_NoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSale_No
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sale_RateColumn() As System.Data.DataColumn
            Get
                Return Me.columnSale_Rate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sale_AmountColumn() As System.Data.DataColumn
            Get
                Return Me.columnSale_Amount
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As bwrepfunRow
            Get
                Return CType(Me.Rows(index),bwrepfunRow)
            End Get
        End Property
        
        Public Event bwrepfunRowChanging As bwrepfunRowChangeEventHandler
        
        Public Event bwrepfunRowChanged As bwrepfunRowChangeEventHandler
        
        Public Event bwrepfunRowDeleting As bwrepfunRowChangeEventHandler
        
        Public Event bwrepfunRowDeleted As bwrepfunRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddbwrepfunRow(ByVal row As bwrepfunRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddbwrepfunRow(ByVal _Pur__BatchNo As String, ByVal ItemName As String, ByVal _Pur__Qty As Decimal, ByVal _Pur__Nos As Decimal, ByVal Pur_Rate As Decimal, ByVal _Pur__Amount As Decimal, ByVal Sale_BatchNo As String, ByVal Sale_Item As String, ByVal Sale_Qty As Decimal, ByVal Sale_No As Decimal, ByVal Sale_Rate As Decimal, ByVal Sale_Amount As Decimal) As bwrepfunRow
            Dim rowbwrepfunRow As bwrepfunRow = CType(Me.NewRow,bwrepfunRow)
            rowbwrepfunRow.ItemArray = New Object() {_Pur__BatchNo, ItemName, _Pur__Qty, _Pur__Nos, Pur_Rate, _Pur__Amount, Sale_BatchNo, Sale_Item, Sale_Qty, Sale_No, Sale_Rate, Sale_Amount}
            Me.Rows.Add(rowbwrepfunRow)
            Return rowbwrepfunRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As bwrepfunDataTable = CType(MyBase.Clone,bwrepfunDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New bwrepfunDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me._columnPur__BatchNo = MyBase.Columns("Pur. BatchNo")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me._columnPur__Qty = MyBase.Columns("Pur. Qty")
            Me._columnPur__Nos = MyBase.Columns("Pur. Nos")
            Me.columnPur_Rate = MyBase.Columns("Pur Rate")
            Me._columnPur__Amount = MyBase.Columns("Pur. Amount")
            Me.columnSale_BatchNo = MyBase.Columns("Sale BatchNo")
            Me.columnSale_Item = MyBase.Columns("Sale Item")
            Me.columnSale_Qty = MyBase.Columns("Sale Qty")
            Me.columnSale_No = MyBase.Columns("Sale No")
            Me.columnSale_Rate = MyBase.Columns("Sale Rate")
            Me.columnSale_Amount = MyBase.Columns("Sale Amount")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me._columnPur__BatchNo = New System.Data.DataColumn("Pur. BatchNo", GetType(String), Nothing, System.Data.MappingType.Element)
            Me._columnPur__BatchNo.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Pur__BatchNo")
            Me._columnPur__BatchNo.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Pur__BatchNoColumn")
            Me._columnPur__BatchNo.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPur__BatchNo")
            Me._columnPur__BatchNo.ExtendedProperties.Add("Generator_UserColumnName", "Pur. BatchNo")
            MyBase.Columns.Add(Me._columnPur__BatchNo)
            Me.columnItemName = New System.Data.DataColumn("ItemName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me._columnPur__Qty = New System.Data.DataColumn("Pur. Qty", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me._columnPur__Qty.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Pur__Qty")
            Me._columnPur__Qty.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Pur__QtyColumn")
            Me._columnPur__Qty.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPur__Qty")
            Me._columnPur__Qty.ExtendedProperties.Add("Generator_UserColumnName", "Pur. Qty")
            MyBase.Columns.Add(Me._columnPur__Qty)
            Me._columnPur__Nos = New System.Data.DataColumn("Pur. Nos", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me._columnPur__Nos.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Pur__Nos")
            Me._columnPur__Nos.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Pur__NosColumn")
            Me._columnPur__Nos.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPur__Nos")
            Me._columnPur__Nos.ExtendedProperties.Add("Generator_UserColumnName", "Pur. Nos")
            MyBase.Columns.Add(Me._columnPur__Nos)
            Me.columnPur_Rate = New System.Data.DataColumn("Pur Rate", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.columnPur_Rate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Pur_Rate")
            Me.columnPur_Rate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Pur_RateColumn")
            Me.columnPur_Rate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPur_Rate")
            Me.columnPur_Rate.ExtendedProperties.Add("Generator_UserColumnName", "Pur Rate")
            MyBase.Columns.Add(Me.columnPur_Rate)
            Me._columnPur__Amount = New System.Data.DataColumn("Pur. Amount", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me._columnPur__Amount.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Pur__Amount")
            Me._columnPur__Amount.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_Pur__AmountColumn")
            Me._columnPur__Amount.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPur__Amount")
            Me._columnPur__Amount.ExtendedProperties.Add("Generator_UserColumnName", "Pur. Amount")
            MyBase.Columns.Add(Me._columnPur__Amount)
            Me.columnSale_BatchNo = New System.Data.DataColumn("Sale BatchNo", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnSale_BatchNo.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Sale_BatchNo")
            Me.columnSale_BatchNo.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Sale_BatchNoColumn")
            Me.columnSale_BatchNo.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnSale_BatchNo")
            Me.columnSale_BatchNo.ExtendedProperties.Add("Generator_UserColumnName", "Sale BatchNo")
            MyBase.Columns.Add(Me.columnSale_BatchNo)
            Me.columnSale_Item = New System.Data.DataColumn("Sale Item", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnSale_Item.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Sale_Item")
            Me.columnSale_Item.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Sale_ItemColumn")
            Me.columnSale_Item.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnSale_Item")
            Me.columnSale_Item.ExtendedProperties.Add("Generator_UserColumnName", "Sale Item")
            MyBase.Columns.Add(Me.columnSale_Item)
            Me.columnSale_Qty = New System.Data.DataColumn("Sale Qty", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.columnSale_Qty.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Sale_Qty")
            Me.columnSale_Qty.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Sale_QtyColumn")
            Me.columnSale_Qty.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnSale_Qty")
            Me.columnSale_Qty.ExtendedProperties.Add("Generator_UserColumnName", "Sale Qty")
            MyBase.Columns.Add(Me.columnSale_Qty)
            Me.columnSale_No = New System.Data.DataColumn("Sale No", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.columnSale_No.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Sale_No")
            Me.columnSale_No.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Sale_NoColumn")
            Me.columnSale_No.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnSale_No")
            Me.columnSale_No.ExtendedProperties.Add("Generator_UserColumnName", "Sale No")
            MyBase.Columns.Add(Me.columnSale_No)
            Me.columnSale_Rate = New System.Data.DataColumn("Sale Rate", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.columnSale_Rate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Sale_Rate")
            Me.columnSale_Rate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Sale_RateColumn")
            Me.columnSale_Rate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnSale_Rate")
            Me.columnSale_Rate.ExtendedProperties.Add("Generator_UserColumnName", "Sale Rate")
            MyBase.Columns.Add(Me.columnSale_Rate)
            Me.columnSale_Amount = New System.Data.DataColumn("Sale Amount", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.columnSale_Amount.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Sale_Amount")
            Me.columnSale_Amount.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Sale_AmountColumn")
            Me.columnSale_Amount.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnSale_Amount")
            Me.columnSale_Amount.ExtendedProperties.Add("Generator_UserColumnName", "Sale Amount")
            MyBase.Columns.Add(Me.columnSale_Amount)
            Me._columnPur__BatchNo.MaxLength = 50
            Me.columnItemName.AllowDBNull = false
            Me.columnItemName.MaxLength = 30
            Me._columnPur__Qty.AllowDBNull = false
            Me._columnPur__Nos.AllowDBNull = false
            Me.columnPur_Rate.AllowDBNull = false
            Me._columnPur__Amount.AllowDBNull = false
            Me.columnSale_BatchNo.MaxLength = 50
            Me.columnSale_Item.MaxLength = 30
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewbwrepfunRow() As bwrepfunRow
            Return CType(Me.NewRow,bwrepfunRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New bwrepfunRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(bwrepfunRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.bwrepfunRowChangedEvent) Is Nothing) Then
                RaiseEvent bwrepfunRowChanged(Me, New bwrepfunRowChangeEvent(CType(e.Row,bwrepfunRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.bwrepfunRowChangingEvent) Is Nothing) Then
                RaiseEvent bwrepfunRowChanging(Me, New bwrepfunRowChangeEvent(CType(e.Row,bwrepfunRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.bwrepfunRowDeletedEvent) Is Nothing) Then
                RaiseEvent bwrepfunRowDeleted(Me, New bwrepfunRowChangeEvent(CType(e.Row,bwrepfunRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.bwrepfunRowDeletingEvent) Is Nothing) Then
                RaiseEvent bwrepfunRowDeleting(Me, New bwrepfunRowChangeEvent(CType(e.Row,bwrepfunRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovebwrepfunRow(ByVal row As bwrepfunRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetchkbw = New DataSetchkbw
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "bwrepfunDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class bwrepfunRow
        Inherits System.Data.DataRow
        
        Private tablebwrepfun As bwrepfunDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebwrepfun = CType(Me.Table,bwrepfunDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Pur__BatchNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablebwrepfun._Pur__BatchNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Pur. BatchNo' in table 'bwrepfun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebwrepfun._Pur__BatchNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Return CType(Me(Me.tablebwrepfun.ItemNameColumn),String)
            End Get
            Set
                Me(Me.tablebwrepfun.ItemNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Pur__Qty() As Decimal
            Get
                Return CType(Me(Me.tablebwrepfun._Pur__QtyColumn),Decimal)
            End Get
            Set
                Me(Me.tablebwrepfun._Pur__QtyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Pur__Nos() As Decimal
            Get
                Return CType(Me(Me.tablebwrepfun._Pur__NosColumn),Decimal)
            End Get
            Set
                Me(Me.tablebwrepfun._Pur__NosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pur_Rate() As Decimal
            Get
                Return CType(Me(Me.tablebwrepfun.Pur_RateColumn),Decimal)
            End Get
            Set
                Me(Me.tablebwrepfun.Pur_RateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Pur__Amount() As Decimal
            Get
                Return CType(Me(Me.tablebwrepfun._Pur__AmountColumn),Decimal)
            End Get
            Set
                Me(Me.tablebwrepfun._Pur__AmountColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sale_BatchNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablebwrepfun.Sale_BatchNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Sale BatchNo' in table 'bwrepfun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebwrepfun.Sale_BatchNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sale_Item() As String
            Get
                Try 
                    Return CType(Me(Me.tablebwrepfun.Sale_ItemColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Sale Item' in table 'bwrepfun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebwrepfun.Sale_ItemColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sale_Qty() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablebwrepfun.Sale_QtyColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Sale Qty' in table 'bwrepfun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebwrepfun.Sale_QtyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sale_No() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablebwrepfun.Sale_NoColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Sale No' in table 'bwrepfun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebwrepfun.Sale_NoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sale_Rate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablebwrepfun.Sale_RateColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Sale Rate' in table 'bwrepfun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebwrepfun.Sale_RateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sale_Amount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablebwrepfun.Sale_AmountColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Sale Amount' in table 'bwrepfun' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebwrepfun.Sale_AmountColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_Pur__BatchNoNull() As Boolean
            Return Me.IsNull(Me.tablebwrepfun._Pur__BatchNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_Pur__BatchNoNull()
            Me(Me.tablebwrepfun._Pur__BatchNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSale_BatchNoNull() As Boolean
            Return Me.IsNull(Me.tablebwrepfun.Sale_BatchNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSale_BatchNoNull()
            Me(Me.tablebwrepfun.Sale_BatchNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSale_ItemNull() As Boolean
            Return Me.IsNull(Me.tablebwrepfun.Sale_ItemColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSale_ItemNull()
            Me(Me.tablebwrepfun.Sale_ItemColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSale_QtyNull() As Boolean
            Return Me.IsNull(Me.tablebwrepfun.Sale_QtyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSale_QtyNull()
            Me(Me.tablebwrepfun.Sale_QtyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSale_NoNull() As Boolean
            Return Me.IsNull(Me.tablebwrepfun.Sale_NoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSale_NoNull()
            Me(Me.tablebwrepfun.Sale_NoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSale_RateNull() As Boolean
            Return Me.IsNull(Me.tablebwrepfun.Sale_RateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSale_RateNull()
            Me(Me.tablebwrepfun.Sale_RateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSale_AmountNull() As Boolean
            Return Me.IsNull(Me.tablebwrepfun.Sale_AmountColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSale_AmountNull()
            Me(Me.tablebwrepfun.Sale_AmountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class bwrepfunRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As bwrepfunRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As bwrepfunRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As bwrepfunRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetchkbwTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class bwrepfunTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "bwrepfun"
            tableMapping.ColumnMappings.Add("Pur. BatchNo", "Pur. BatchNo")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("Pur. Qty", "Pur. Qty")
            tableMapping.ColumnMappings.Add("Pur. Nos", "Pur. Nos")
            tableMapping.ColumnMappings.Add("Pur Rate", "Pur Rate")
            tableMapping.ColumnMappings.Add("Pur. Amount", "Pur. Amount")
            tableMapping.ColumnMappings.Add("Sale BatchNo", "Sale BatchNo")
            tableMapping.ColumnMappings.Add("Sale Item", "Sale Item")
            tableMapping.ColumnMappings.Add("Sale Qty", "Sale Qty")
            tableMapping.ColumnMappings.Add("Sale No", "Sale No")
            tableMapping.ColumnMappings.Add("Sale Rate", "Sale Rate")
            tableMapping.ColumnMappings.Add("Sale Amount", "Sale Amount")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            ' Me._connection.ConnectionString = Global.PhoenixGroups.My.MySettings.Default.RagaGroupConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Pur. BatchNo], ItemName, [Pur. Qty], [Pur. Nos], [Pur Rate], [Pur. Amount"& _ 
                "], [Sale BatchNo], [Sale Item], [Sale Qty], [Sale No], [Sale Rate], [Sale Amount"& _ 
                "] FROM dbo.bwrepfun(@areacode)"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@areacode", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetchkbw.bwrepfunDataTable, ByVal areacode As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (areacode Is Nothing) Then
                Throw New System.ArgumentNullException("areacode")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(areacode,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal areacode As String) As DataSetchkbw.bwrepfunDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (areacode Is Nothing) Then
                Throw New System.ArgumentNullException("areacode")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(areacode,String)
            End If
            Dim dataTable As DataSetchkbw.bwrepfunDataTable = New DataSetchkbw.bwrepfunDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
