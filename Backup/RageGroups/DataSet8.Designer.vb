'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DataSet8"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet8
    Inherits System.Data.DataSet
    
    Private tableINVINFO_PHFA_0910 As INVINFO_PHFA_0910DataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("INVINFO_PHFA_0910")) Is Nothing) Then
                MyBase.Tables.Add(New INVINFO_PHFA_0910DataTable(ds.Tables("INVINFO_PHFA_0910")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INVINFO_PHFA_0910() As INVINFO_PHFA_0910DataTable
        Get
            Return Me.tableINVINFO_PHFA_0910
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DataSet8 = CType(MyBase.Clone,DataSet8)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("INVINFO_PHFA_0910")) Is Nothing) Then
                MyBase.Tables.Add(New INVINFO_PHFA_0910DataTable(ds.Tables("INVINFO_PHFA_0910")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableINVINFO_PHFA_0910 = CType(MyBase.Tables("INVINFO_PHFA_0910"),INVINFO_PHFA_0910DataTable)
        If (initTable = true) Then
            If (Not (Me.tableINVINFO_PHFA_0910) Is Nothing) Then
                Me.tableINVINFO_PHFA_0910.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet8"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet8.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableINVINFO_PHFA_0910 = New INVINFO_PHFA_0910DataTable
        MyBase.Tables.Add(Me.tableINVINFO_PHFA_0910)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeINVINFO_PHFA_0910() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet8 = New DataSet8
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub INVINFO_PHFA_0910RowChangeEventHandler(ByVal sender As Object, ByVal e As INVINFO_PHFA_0910RowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INVINFO_PHFA_0910DataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCmp_id As System.Data.DataColumn
        
        Private columnUname As System.Data.DataColumn
        
        Private columnVou_no As System.Data.DataColumn
        
        Private columnVou_type As System.Data.DataColumn
        
        Private columnVou_date As System.Data.DataColumn
        
        Private columnAcc_head_code As System.Data.DataColumn
        
        Private columnAcc_head As System.Data.DataColumn
        
        Private columnItemName As System.Data.DataColumn
        
        Private columnQty As System.Data.DataColumn
        
        Private columnQtyNos As System.Data.DataColumn
        
        Private columnUnit As System.Data.DataColumn
        
        Private columnRate As System.Data.DataColumn
        
        Private columnAmount As System.Data.DataColumn
        
        Private columnFree_Qty As System.Data.DataColumn
        
        Private columnBillType As System.Data.DataColumn
        
        Private columnBillNo As System.Data.DataColumn
        
        Private columnBillDate As System.Data.DataColumn
        
        Private columnAreaCode As System.Data.DataColumn
        
        Private columnFree_Per As System.Data.DataColumn
        
        Private columnHatch_date As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INVINFO_PHFA_0910"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cmp_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnCmp_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnameColumn() As System.Data.DataColumn
            Get
                Return Me.columnUname
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vou_noColumn() As System.Data.DataColumn
            Get
                Return Me.columnVou_no
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vou_typeColumn() As System.Data.DataColumn
            Get
                Return Me.columnVou_type
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vou_dateColumn() As System.Data.DataColumn
            Get
                Return Me.columnVou_date
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Acc_head_codeColumn() As System.Data.DataColumn
            Get
                Return Me.columnAcc_head_code
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Acc_headColumn() As System.Data.DataColumn
            Get
                Return Me.columnAcc_head
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyNosColumn() As System.Data.DataColumn
            Get
                Return Me.columnQtyNos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitColumn() As System.Data.DataColumn
            Get
                Return Me.columnUnit
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RateColumn() As System.Data.DataColumn
            Get
                Return Me.columnRate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AmountColumn() As System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Free_QtyColumn() As System.Data.DataColumn
            Get
                Return Me.columnFree_Qty
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnBillType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnBillNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnBillDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AreaCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnAreaCode
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Free_PerColumn() As System.Data.DataColumn
            Get
                Return Me.columnFree_Per
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Hatch_dateColumn() As System.Data.DataColumn
            Get
                Return Me.columnHatch_date
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INVINFO_PHFA_0910Row
            Get
                Return CType(Me.Rows(index),INVINFO_PHFA_0910Row)
            End Get
        End Property
        
        Public Event INVINFO_PHFA_0910RowChanging As INVINFO_PHFA_0910RowChangeEventHandler
        
        Public Event INVINFO_PHFA_0910RowChanged As INVINFO_PHFA_0910RowChangeEventHandler
        
        Public Event INVINFO_PHFA_0910RowDeleting As INVINFO_PHFA_0910RowChangeEventHandler
        
        Public Event INVINFO_PHFA_0910RowDeleted As INVINFO_PHFA_0910RowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddINVINFO_PHFA_0910Row(ByVal row As INVINFO_PHFA_0910Row)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddINVINFO_PHFA_0910Row( _
                    ByVal Cmp_id As String,  _
                    ByVal Uname As String,  _
                    ByVal Vou_no As String,  _
                    ByVal Vou_type As String,  _
                    ByVal Vou_date As Date,  _
                    ByVal Acc_head_code As String,  _
                    ByVal Acc_head As String,  _
                    ByVal ItemName As String,  _
                    ByVal Qty As Decimal,  _
                    ByVal QtyNos As Decimal,  _
                    ByVal Unit As String,  _
                    ByVal Rate As Decimal,  _
                    ByVal Amount As Decimal,  _
                    ByVal Free_Qty As Decimal,  _
                    ByVal BillType As String,  _
                    ByVal BillNo As String,  _
                    ByVal BillDate As Date,  _
                    ByVal AreaCode As String,  _
                    ByVal Free_Per As Decimal,  _
                    ByVal Hatch_date As Date) As INVINFO_PHFA_0910Row
            Dim rowINVINFO_PHFA_0910Row As INVINFO_PHFA_0910Row = CType(Me.NewRow,INVINFO_PHFA_0910Row)
            rowINVINFO_PHFA_0910Row.ItemArray = New Object() {Cmp_id, Uname, Vou_no, Vou_type, Vou_date, Acc_head_code, Acc_head, ItemName, Qty, QtyNos, Unit, Rate, Amount, Free_Qty, BillType, BillNo, BillDate, AreaCode, Free_Per, Hatch_date}
            Me.Rows.Add(rowINVINFO_PHFA_0910Row)
            Return rowINVINFO_PHFA_0910Row
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As INVINFO_PHFA_0910DataTable = CType(MyBase.Clone,INVINFO_PHFA_0910DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New INVINFO_PHFA_0910DataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCmp_id = MyBase.Columns("Cmp_id")
            Me.columnUname = MyBase.Columns("Uname")
            Me.columnVou_no = MyBase.Columns("Vou_no")
            Me.columnVou_type = MyBase.Columns("Vou_type")
            Me.columnVou_date = MyBase.Columns("Vou_date")
            Me.columnAcc_head_code = MyBase.Columns("Acc_head_code")
            Me.columnAcc_head = MyBase.Columns("Acc_head")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnQtyNos = MyBase.Columns("QtyNos")
            Me.columnUnit = MyBase.Columns("Unit")
            Me.columnRate = MyBase.Columns("Rate")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnFree_Qty = MyBase.Columns("Free_Qty")
            Me.columnBillType = MyBase.Columns("BillType")
            Me.columnBillNo = MyBase.Columns("BillNo")
            Me.columnBillDate = MyBase.Columns("BillDate")
            Me.columnAreaCode = MyBase.Columns("AreaCode")
            Me.columnFree_Per = MyBase.Columns("Free_Per")
            Me.columnHatch_date = MyBase.Columns("Hatch_date")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCmp_id = New System.Data.DataColumn("Cmp_id", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmp_id)
            Me.columnUname = New System.Data.DataColumn("Uname", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUname)
            Me.columnVou_no = New System.Data.DataColumn("Vou_no", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVou_no)
            Me.columnVou_type = New System.Data.DataColumn("Vou_type", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVou_type)
            Me.columnVou_date = New System.Data.DataColumn("Vou_date", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVou_date)
            Me.columnAcc_head_code = New System.Data.DataColumn("Acc_head_code", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcc_head_code)
            Me.columnAcc_head = New System.Data.DataColumn("Acc_head", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcc_head)
            Me.columnItemName = New System.Data.DataColumn("ItemName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnQty = New System.Data.DataColumn("Qty", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnQtyNos = New System.Data.DataColumn("QtyNos", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQtyNos)
            Me.columnUnit = New System.Data.DataColumn("Unit", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnit)
            Me.columnRate = New System.Data.DataColumn("Rate", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRate)
            Me.columnAmount = New System.Data.DataColumn("Amount", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnFree_Qty = New System.Data.DataColumn("Free_Qty", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFree_Qty)
            Me.columnBillType = New System.Data.DataColumn("BillType", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillType)
            Me.columnBillNo = New System.Data.DataColumn("BillNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillNo)
            Me.columnBillDate = New System.Data.DataColumn("BillDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillDate)
            Me.columnAreaCode = New System.Data.DataColumn("AreaCode", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAreaCode)
            Me.columnFree_Per = New System.Data.DataColumn("Free_Per", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFree_Per)
            Me.columnHatch_date = New System.Data.DataColumn("Hatch_date", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHatch_date)
            Me.columnCmp_id.AllowDBNull = false
            Me.columnCmp_id.MaxLength = 5
            Me.columnUname.AllowDBNull = false
            Me.columnUname.MaxLength = 15
            Me.columnVou_no.AllowDBNull = false
            Me.columnVou_no.MaxLength = 12
            Me.columnVou_type.AllowDBNull = false
            Me.columnVou_type.MaxLength = 20
            Me.columnVou_date.AllowDBNull = false
            Me.columnAcc_head_code.AllowDBNull = false
            Me.columnAcc_head_code.MaxLength = 8
            Me.columnAcc_head.AllowDBNull = false
            Me.columnAcc_head.MaxLength = 30
            Me.columnItemName.AllowDBNull = false
            Me.columnItemName.MaxLength = 30
            Me.columnQty.AllowDBNull = false
            Me.columnQtyNos.AllowDBNull = false
            Me.columnUnit.AllowDBNull = false
            Me.columnUnit.MaxLength = 10
            Me.columnRate.AllowDBNull = false
            Me.columnAmount.AllowDBNull = false
            Me.columnFree_Qty.AllowDBNull = false
            Me.columnBillType.MaxLength = 10
            Me.columnBillNo.MaxLength = 10
            Me.columnAreaCode.MaxLength = 2
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewINVINFO_PHFA_0910Row() As INVINFO_PHFA_0910Row
            Return CType(Me.NewRow,INVINFO_PHFA_0910Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New INVINFO_PHFA_0910Row(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(INVINFO_PHFA_0910Row)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INVINFO_PHFA_0910RowChangedEvent) Is Nothing) Then
                RaiseEvent INVINFO_PHFA_0910RowChanged(Me, New INVINFO_PHFA_0910RowChangeEvent(CType(e.Row,INVINFO_PHFA_0910Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INVINFO_PHFA_0910RowChangingEvent) Is Nothing) Then
                RaiseEvent INVINFO_PHFA_0910RowChanging(Me, New INVINFO_PHFA_0910RowChangeEvent(CType(e.Row,INVINFO_PHFA_0910Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INVINFO_PHFA_0910RowDeletedEvent) Is Nothing) Then
                RaiseEvent INVINFO_PHFA_0910RowDeleted(Me, New INVINFO_PHFA_0910RowChangeEvent(CType(e.Row,INVINFO_PHFA_0910Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INVINFO_PHFA_0910RowDeletingEvent) Is Nothing) Then
                RaiseEvent INVINFO_PHFA_0910RowDeleting(Me, New INVINFO_PHFA_0910RowChangeEvent(CType(e.Row,INVINFO_PHFA_0910Row), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveINVINFO_PHFA_0910Row(ByVal row As INVINFO_PHFA_0910Row)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet8 = New DataSet8
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INVINFO_PHFA_0910DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class INVINFO_PHFA_0910Row
        Inherits System.Data.DataRow
        
        Private tableINVINFO_PHFA_0910 As INVINFO_PHFA_0910DataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINVINFO_PHFA_0910 = CType(Me.Table,INVINFO_PHFA_0910DataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cmp_id() As String
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.Cmp_idColumn),String)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.Cmp_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Uname() As String
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.UnameColumn),String)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.UnameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vou_no() As String
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.Vou_noColumn),String)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.Vou_noColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vou_type() As String
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.Vou_typeColumn),String)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.Vou_typeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vou_date() As Date
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.Vou_dateColumn),Date)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.Vou_dateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Acc_head_code() As String
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.Acc_head_codeColumn),String)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.Acc_head_codeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Acc_head() As String
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.Acc_headColumn),String)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.Acc_headColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.ItemNameColumn),String)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.ItemNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Decimal
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.QtyColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.QtyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QtyNos() As Decimal
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.QtyNosColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.QtyNosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unit() As String
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.UnitColumn),String)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.UnitColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rate() As Decimal
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.RateColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.RateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Amount() As Decimal
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.AmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.AmountColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Free_Qty() As Decimal
            Get
                Return CType(Me(Me.tableINVINFO_PHFA_0910.Free_QtyColumn),Decimal)
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.Free_QtyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillType() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVINFO_PHFA_0910.BillTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BillType' in table 'INVINFO_PHFA_0910' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.BillTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVINFO_PHFA_0910.BillNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BillNo' in table 'INVINFO_PHFA_0910' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.BillNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableINVINFO_PHFA_0910.BillDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'BillDate' in table 'INVINFO_PHFA_0910' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.BillDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AreaCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVINFO_PHFA_0910.AreaCodeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AreaCode' in table 'INVINFO_PHFA_0910' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.AreaCodeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Free_Per() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVINFO_PHFA_0910.Free_PerColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Free_Per' in table 'INVINFO_PHFA_0910' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.Free_PerColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hatch_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableINVINFO_PHFA_0910.Hatch_dateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Hatch_date' in table 'INVINFO_PHFA_0910' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVINFO_PHFA_0910.Hatch_dateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillTypeNull() As Boolean
            Return Me.IsNull(Me.tableINVINFO_PHFA_0910.BillTypeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillTypeNull()
            Me(Me.tableINVINFO_PHFA_0910.BillTypeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillNoNull() As Boolean
            Return Me.IsNull(Me.tableINVINFO_PHFA_0910.BillNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillNoNull()
            Me(Me.tableINVINFO_PHFA_0910.BillNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillDateNull() As Boolean
            Return Me.IsNull(Me.tableINVINFO_PHFA_0910.BillDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillDateNull()
            Me(Me.tableINVINFO_PHFA_0910.BillDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAreaCodeNull() As Boolean
            Return Me.IsNull(Me.tableINVINFO_PHFA_0910.AreaCodeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAreaCodeNull()
            Me(Me.tableINVINFO_PHFA_0910.AreaCodeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFree_PerNull() As Boolean
            Return Me.IsNull(Me.tableINVINFO_PHFA_0910.Free_PerColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFree_PerNull()
            Me(Me.tableINVINFO_PHFA_0910.Free_PerColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHatch_dateNull() As Boolean
            Return Me.IsNull(Me.tableINVINFO_PHFA_0910.Hatch_dateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHatch_dateNull()
            Me(Me.tableINVINFO_PHFA_0910.Hatch_dateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class INVINFO_PHFA_0910RowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As INVINFO_PHFA_0910Row
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As INVINFO_PHFA_0910Row, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As INVINFO_PHFA_0910Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSet8TableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class INVINFO_PHFA_0910TableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "INVINFO_PHFA_0910"
            tableMapping.ColumnMappings.Add("Cmp_id", "Cmp_id")
            tableMapping.ColumnMappings.Add("Uname", "Uname")
            tableMapping.ColumnMappings.Add("Vou_no", "Vou_no")
            tableMapping.ColumnMappings.Add("Vou_type", "Vou_type")
            tableMapping.ColumnMappings.Add("Vou_date", "Vou_date")
            tableMapping.ColumnMappings.Add("Acc_head_code", "Acc_head_code")
            tableMapping.ColumnMappings.Add("Acc_head", "Acc_head")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("Qty", "Qty")
            tableMapping.ColumnMappings.Add("QtyNos", "QtyNos")
            tableMapping.ColumnMappings.Add("Unit", "Unit")
            tableMapping.ColumnMappings.Add("Rate", "Rate")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("Free_Qty", "Free_Qty")
            tableMapping.ColumnMappings.Add("BillType", "BillType")
            tableMapping.ColumnMappings.Add("BillNo", "BillNo")
            tableMapping.ColumnMappings.Add("BillDate", "BillDate")
            tableMapping.ColumnMappings.Add("AreaCode", "AreaCode")
            tableMapping.ColumnMappings.Add("Free_Per", "Free_Per")
            tableMapping.ColumnMappings.Add("Hatch_date", "Hatch_date")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[INVINFO_PHFA_0910] ([Cmp_id], [Uname], [Vou_no], [Vou_type], ["& _ 
                "Vou_date], [Acc_head_code], [Acc_head], [ItemName], [Qty], [QtyNos], [Unit], [Ra"& _ 
                "te], [Amount], [Free_Qty], [BillType], [BillNo], [BillDate], [AreaCode], [Free_P"& _ 
                "er], [Hatch_date]) VALUES (@Cmp_id, @Uname, @Vou_no, @Vou_type, @Vou_date, @Acc_"& _ 
                "head_code, @Acc_head, @ItemName, @Qty, @QtyNos, @Unit, @Rate, @Amount, @Free_Qty"& _ 
                ", @BillType, @BillNo, @BillDate, @AreaCode, @Free_Per, @Hatch_date)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Cmp_id", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Cmp_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Uname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Uname", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Vou_no", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Vou_no", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Vou_type", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Vou_type", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Vou_date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Vou_date", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Acc_head_code", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Acc_head_code", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Acc_head", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Acc_head", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@ItemName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ItemName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Qty", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "Qty", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@QtyNos", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "QtyNos", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Unit", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Unit", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Rate", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "Rate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Amount", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "Amount", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Free_Qty", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 6, 2, "Free_Qty", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@BillType", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BillType", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@BillNo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BillNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@BillDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "BillDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@AreaCode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AreaCode", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Free_Per", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 6, 2, "Free_Per", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Hatch_date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Hatch_date", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            ' Me._connection.ConnectionString = Global.PhoenixGroups.My.MySettings.Default.RagaGroupConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Cmp_id, Uname, Vou_no, Vou_type, Vou_date, Acc_head_code, Acc_head, ItemNa"& _ 
                "me, Qty, QtyNos, Unit, Rate, Amount, Free_Qty, BillType, BillNo, BillDate, AreaC"& _ 
                "ode, Free_Per, Hatch_date FROM dbo.INVINFO_PHFA_0910"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet8.INVINFO_PHFA_0910DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSet8.INVINFO_PHFA_0910DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSet8.INVINFO_PHFA_0910DataTable = New DataSet8.INVINFO_PHFA_0910DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSet8.INVINFO_PHFA_0910DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSet8) As Integer
            Return Me.Adapter.Update(dataSet, "INVINFO_PHFA_0910")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Cmp_id As String,  _
                    ByVal Uname As String,  _
                    ByVal Vou_no As String,  _
                    ByVal Vou_type As String,  _
                    ByVal Vou_date As Date,  _
                    ByVal Acc_head_code As String,  _
                    ByVal Acc_head As String,  _
                    ByVal ItemName As String,  _
                    ByVal Qty As Decimal,  _
                    ByVal QtyNos As Decimal,  _
                    ByVal Unit As String,  _
                    ByVal Rate As Decimal,  _
                    ByVal Amount As Decimal,  _
                    ByVal Free_Qty As Decimal,  _
                    ByVal BillType As String,  _
                    ByVal BillNo As String,  _
                    ByVal BillDate As System.Nullable(Of Date),  _
                    ByVal AreaCode As String,  _
                    ByVal Free_Per As System.Nullable(Of Decimal),  _
                    ByVal Hatch_date As System.Nullable(Of Date)) As Integer
            If (Cmp_id Is Nothing) Then
                Throw New System.ArgumentNullException("Cmp_id")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Cmp_id,String)
            End If
            If (Uname Is Nothing) Then
                Throw New System.ArgumentNullException("Uname")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Uname,String)
            End If
            If (Vou_no Is Nothing) Then
                Throw New System.ArgumentNullException("Vou_no")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Vou_no,String)
            End If
            If (Vou_type Is Nothing) Then
                Throw New System.ArgumentNullException("Vou_type")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Vou_type,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Vou_date,Date)
            If (Acc_head_code Is Nothing) Then
                Throw New System.ArgumentNullException("Acc_head_code")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Acc_head_code,String)
            End If
            If (Acc_head Is Nothing) Then
                Throw New System.ArgumentNullException("Acc_head")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Acc_head,String)
            End If
            If (ItemName Is Nothing) Then
                Throw New System.ArgumentNullException("ItemName")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ItemName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Qty,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(QtyNos,Decimal)
            If (Unit Is Nothing) Then
                Throw New System.ArgumentNullException("Unit")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Unit,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(Rate,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(Amount,Decimal)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(Free_Qty,Decimal)
            If (BillType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(BillType,String)
            End If
            If (BillNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(BillNo,String)
            End If
            If (BillDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(BillDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (AreaCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(AreaCode,String)
            End If
            If (Free_Per.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Free_Per.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (Hatch_date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Hatch_date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
