'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("BankBook"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class BankBook
    Inherits System.Data.DataSet
    
    Private tablerepGeneralLedger As repGeneralLedgerDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("repGeneralLedger")) Is Nothing) Then
                MyBase.Tables.Add(New repGeneralLedgerDataTable(ds.Tables("repGeneralLedger")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property repGeneralLedger() As repGeneralLedgerDataTable
        Get
            Return Me.tablerepGeneralLedger
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As BankBook = CType(MyBase.Clone,BankBook)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("repGeneralLedger")) Is Nothing) Then
                MyBase.Tables.Add(New repGeneralLedgerDataTable(ds.Tables("repGeneralLedger")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablerepGeneralLedger = CType(MyBase.Tables("repGeneralLedger"),repGeneralLedgerDataTable)
        If (initTable = true) Then
            If (Not (Me.tablerepGeneralLedger) Is Nothing) Then
                Me.tablerepGeneralLedger.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "BankBook"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/BankBook.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablerepGeneralLedger = New repGeneralLedgerDataTable
        MyBase.Tables.Add(Me.tablerepGeneralLedger)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializerepGeneralLedger() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As BankBook = New BankBook
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub repGeneralLedgerRowChangeEventHandler(ByVal sender As Object, ByVal e As repGeneralLedgerRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class repGeneralLedgerDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCmpid As System.Data.DataColumn
        
        Private columnUname As System.Data.DataColumn
        
        Private columnEntry_id As System.Data.DataColumn
        
        Private columnVou_no As System.Data.DataColumn
        
        Private columnVou_type As System.Data.DataColumn
        
        Private columnVou_date As System.Data.DataColumn
        
        Private columnAcc_head_code As System.Data.DataColumn
        
        Private columnAcc_head As System.Data.DataColumn
        
        Private columndramt As System.Data.DataColumn
        
        Private columncramt As System.Data.DataColumn
        
        Private columnPay_mode As System.Data.DataColumn
        
        Private columnCheque_no As System.Data.DataColumn
        
        Private columnNarration As System.Data.DataColumn
        
        Private columnGroup_name As System.Data.DataColumn
        
        Private columnSub_group_name As System.Data.DataColumn
        
        Private columnCh_issue_date As System.Data.DataColumn
        
        Private columnCh_date As System.Data.DataColumn
        
        Private columnBalance As System.Data.DataColumn
        
        Private columntrans_id As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "repGeneralLedger"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CmpidColumn() As System.Data.DataColumn
            Get
                Return Me.columnCmpid
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnameColumn() As System.Data.DataColumn
            Get
                Return Me.columnUname
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Entry_idColumn() As System.Data.DataColumn
            Get
                Return Me.columnEntry_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vou_noColumn() As System.Data.DataColumn
            Get
                Return Me.columnVou_no
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vou_typeColumn() As System.Data.DataColumn
            Get
                Return Me.columnVou_type
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vou_dateColumn() As System.Data.DataColumn
            Get
                Return Me.columnVou_date
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Acc_head_codeColumn() As System.Data.DataColumn
            Get
                Return Me.columnAcc_head_code
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Acc_headColumn() As System.Data.DataColumn
            Get
                Return Me.columnAcc_head
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property dramtColumn() As System.Data.DataColumn
            Get
                Return Me.columndramt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cramtColumn() As System.Data.DataColumn
            Get
                Return Me.columncramt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pay_modeColumn() As System.Data.DataColumn
            Get
                Return Me.columnPay_mode
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cheque_noColumn() As System.Data.DataColumn
            Get
                Return Me.columnCheque_no
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NarrationColumn() As System.Data.DataColumn
            Get
                Return Me.columnNarration
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Group_nameColumn() As System.Data.DataColumn
            Get
                Return Me.columnGroup_name
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Sub_group_nameColumn() As System.Data.DataColumn
            Get
                Return Me.columnSub_group_name
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ch_issue_dateColumn() As System.Data.DataColumn
            Get
                Return Me.columnCh_issue_date
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ch_dateColumn() As System.Data.DataColumn
            Get
                Return Me.columnCh_date
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BalanceColumn() As System.Data.DataColumn
            Get
                Return Me.columnBalance
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trans_idColumn() As System.Data.DataColumn
            Get
                Return Me.columntrans_id
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As repGeneralLedgerRow
            Get
                Return CType(Me.Rows(index),repGeneralLedgerRow)
            End Get
        End Property
        
        Public Event repGeneralLedgerRowChanging As repGeneralLedgerRowChangeEventHandler
        
        Public Event repGeneralLedgerRowChanged As repGeneralLedgerRowChangeEventHandler
        
        Public Event repGeneralLedgerRowDeleting As repGeneralLedgerRowChangeEventHandler
        
        Public Event repGeneralLedgerRowDeleted As repGeneralLedgerRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddrepGeneralLedgerRow(ByVal row As repGeneralLedgerRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddrepGeneralLedgerRow( _
                    ByVal Cmpid As String,  _
                    ByVal Uname As String,  _
                    ByVal Entry_id As Long,  _
                    ByVal Vou_no As String,  _
                    ByVal Vou_type As String,  _
                    ByVal Vou_date As Date,  _
                    ByVal Acc_head_code As String,  _
                    ByVal Acc_head As String,  _
                    ByVal dramt As Decimal,  _
                    ByVal cramt As Decimal,  _
                    ByVal Pay_mode As String,  _
                    ByVal Cheque_no As String,  _
                    ByVal Narration As String,  _
                    ByVal Group_name As String,  _
                    ByVal Sub_group_name As String,  _
                    ByVal Ch_issue_date As Date,  _
                    ByVal Ch_date As Date,  _
                    ByVal Balance As Decimal) As repGeneralLedgerRow
            Dim rowrepGeneralLedgerRow As repGeneralLedgerRow = CType(Me.NewRow,repGeneralLedgerRow)
            rowrepGeneralLedgerRow.ItemArray = New Object() {Cmpid, Uname, Entry_id, Vou_no, Vou_type, Vou_date, Acc_head_code, Acc_head, dramt, cramt, Pay_mode, Cheque_no, Narration, Group_name, Sub_group_name, Ch_issue_date, Ch_date, Balance, Nothing}
            Me.Rows.Add(rowrepGeneralLedgerRow)
            Return rowrepGeneralLedgerRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As repGeneralLedgerDataTable = CType(MyBase.Clone,repGeneralLedgerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New repGeneralLedgerDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCmpid = MyBase.Columns("Cmpid")
            Me.columnUname = MyBase.Columns("Uname")
            Me.columnEntry_id = MyBase.Columns("Entry_id")
            Me.columnVou_no = MyBase.Columns("Vou_no")
            Me.columnVou_type = MyBase.Columns("Vou_type")
            Me.columnVou_date = MyBase.Columns("Vou_date")
            Me.columnAcc_head_code = MyBase.Columns("Acc_head_code")
            Me.columnAcc_head = MyBase.Columns("Acc_head")
            Me.columndramt = MyBase.Columns("dramt")
            Me.columncramt = MyBase.Columns("cramt")
            Me.columnPay_mode = MyBase.Columns("Pay_mode")
            Me.columnCheque_no = MyBase.Columns("Cheque_no")
            Me.columnNarration = MyBase.Columns("Narration")
            Me.columnGroup_name = MyBase.Columns("Group_name")
            Me.columnSub_group_name = MyBase.Columns("Sub_group_name")
            Me.columnCh_issue_date = MyBase.Columns("Ch_issue_date")
            Me.columnCh_date = MyBase.Columns("Ch_date")
            Me.columnBalance = MyBase.Columns("Balance")
            Me.columntrans_id = MyBase.Columns("trans_id")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCmpid = New System.Data.DataColumn("Cmpid", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCmpid)
            Me.columnUname = New System.Data.DataColumn("Uname", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUname)
            Me.columnEntry_id = New System.Data.DataColumn("Entry_id", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntry_id)
            Me.columnVou_no = New System.Data.DataColumn("Vou_no", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVou_no)
            Me.columnVou_type = New System.Data.DataColumn("Vou_type", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVou_type)
            Me.columnVou_date = New System.Data.DataColumn("Vou_date", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVou_date)
            Me.columnAcc_head_code = New System.Data.DataColumn("Acc_head_code", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcc_head_code)
            Me.columnAcc_head = New System.Data.DataColumn("Acc_head", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcc_head)
            Me.columndramt = New System.Data.DataColumn("dramt", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndramt)
            Me.columncramt = New System.Data.DataColumn("cramt", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncramt)
            Me.columnPay_mode = New System.Data.DataColumn("Pay_mode", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPay_mode)
            Me.columnCheque_no = New System.Data.DataColumn("Cheque_no", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCheque_no)
            Me.columnNarration = New System.Data.DataColumn("Narration", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNarration)
            Me.columnGroup_name = New System.Data.DataColumn("Group_name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroup_name)
            Me.columnSub_group_name = New System.Data.DataColumn("Sub_group_name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSub_group_name)
            Me.columnCh_issue_date = New System.Data.DataColumn("Ch_issue_date", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCh_issue_date)
            Me.columnCh_date = New System.Data.DataColumn("Ch_date", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCh_date)
            Me.columnBalance = New System.Data.DataColumn("Balance", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBalance)
            Me.columntrans_id = New System.Data.DataColumn("trans_id", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrans_id)
            Me.columnCmpid.MaxLength = 5
            Me.columnUname.MaxLength = 15
            Me.columnEntry_id.AllowDBNull = false
            Me.columnVou_no.AllowDBNull = false
            Me.columnVou_no.MaxLength = 12
            Me.columnVou_type.AllowDBNull = false
            Me.columnVou_type.MaxLength = 20
            Me.columnAcc_head_code.AllowDBNull = false
            Me.columnAcc_head_code.MaxLength = 8
            Me.columnAcc_head.AllowDBNull = false
            Me.columnAcc_head.MaxLength = 30
            Me.columndramt.AllowDBNull = false
            Me.columncramt.AllowDBNull = false
            Me.columnPay_mode.AllowDBNull = false
            Me.columnPay_mode.MaxLength = 10
            Me.columnCheque_no.AllowDBNull = false
            Me.columnCheque_no.MaxLength = 15
            Me.columnNarration.AllowDBNull = false
            Me.columnNarration.MaxLength = 120
            Me.columnGroup_name.AllowDBNull = false
            Me.columnGroup_name.MaxLength = 40
            Me.columnSub_group_name.AllowDBNull = false
            Me.columnSub_group_name.MaxLength = 60
            Me.columntrans_id.AutoIncrement = true
            Me.columntrans_id.AllowDBNull = false
            Me.columntrans_id.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewrepGeneralLedgerRow() As repGeneralLedgerRow
            Return CType(Me.NewRow,repGeneralLedgerRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New repGeneralLedgerRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(repGeneralLedgerRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.repGeneralLedgerRowChangedEvent) Is Nothing) Then
                RaiseEvent repGeneralLedgerRowChanged(Me, New repGeneralLedgerRowChangeEvent(CType(e.Row,repGeneralLedgerRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.repGeneralLedgerRowChangingEvent) Is Nothing) Then
                RaiseEvent repGeneralLedgerRowChanging(Me, New repGeneralLedgerRowChangeEvent(CType(e.Row,repGeneralLedgerRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.repGeneralLedgerRowDeletedEvent) Is Nothing) Then
                RaiseEvent repGeneralLedgerRowDeleted(Me, New repGeneralLedgerRowChangeEvent(CType(e.Row,repGeneralLedgerRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.repGeneralLedgerRowDeletingEvent) Is Nothing) Then
                RaiseEvent repGeneralLedgerRowDeleting(Me, New repGeneralLedgerRowChangeEvent(CType(e.Row,repGeneralLedgerRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoverepGeneralLedgerRow(ByVal row As repGeneralLedgerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As BankBook = New BankBook
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "repGeneralLedgerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class repGeneralLedgerRow
        Inherits System.Data.DataRow
        
        Private tablerepGeneralLedger As repGeneralLedgerDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablerepGeneralLedger = CType(Me.Table,repGeneralLedgerDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cmpid() As String
            Get
                Try 
                    Return CType(Me(Me.tablerepGeneralLedger.CmpidColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Cmpid' in table 'repGeneralLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerepGeneralLedger.CmpidColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Uname() As String
            Get
                Try 
                    Return CType(Me(Me.tablerepGeneralLedger.UnameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Uname' in table 'repGeneralLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerepGeneralLedger.UnameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Entry_id() As Long
            Get
                Return CType(Me(Me.tablerepGeneralLedger.Entry_idColumn),Long)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Entry_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vou_no() As String
            Get
                Return CType(Me(Me.tablerepGeneralLedger.Vou_noColumn),String)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Vou_noColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vou_type() As String
            Get
                Return CType(Me(Me.tablerepGeneralLedger.Vou_typeColumn),String)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Vou_typeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vou_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablerepGeneralLedger.Vou_dateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Vou_date' in table 'repGeneralLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Vou_dateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Acc_head_code() As String
            Get
                Return CType(Me(Me.tablerepGeneralLedger.Acc_head_codeColumn),String)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Acc_head_codeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Acc_head() As String
            Get
                Return CType(Me(Me.tablerepGeneralLedger.Acc_headColumn),String)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Acc_headColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dramt() As Decimal
            Get
                Return CType(Me(Me.tablerepGeneralLedger.dramtColumn),Decimal)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.dramtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cramt() As Decimal
            Get
                Return CType(Me(Me.tablerepGeneralLedger.cramtColumn),Decimal)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.cramtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pay_mode() As String
            Get
                Return CType(Me(Me.tablerepGeneralLedger.Pay_modeColumn),String)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Pay_modeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cheque_no() As String
            Get
                Return CType(Me(Me.tablerepGeneralLedger.Cheque_noColumn),String)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Cheque_noColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Narration() As String
            Get
                Return CType(Me(Me.tablerepGeneralLedger.NarrationColumn),String)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.NarrationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Group_name() As String
            Get
                Return CType(Me(Me.tablerepGeneralLedger.Group_nameColumn),String)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Group_nameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sub_group_name() As String
            Get
                Return CType(Me(Me.tablerepGeneralLedger.Sub_group_nameColumn),String)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Sub_group_nameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ch_issue_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablerepGeneralLedger.Ch_issue_dateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Ch_issue_date' in table 'repGeneralLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Ch_issue_dateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ch_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablerepGeneralLedger.Ch_dateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Ch_date' in table 'repGeneralLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerepGeneralLedger.Ch_dateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Balance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablerepGeneralLedger.BalanceColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Balance' in table 'repGeneralLedger' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablerepGeneralLedger.BalanceColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trans_id() As Long
            Get
                Return CType(Me(Me.tablerepGeneralLedger.trans_idColumn),Long)
            End Get
            Set
                Me(Me.tablerepGeneralLedger.trans_idColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCmpidNull() As Boolean
            Return Me.IsNull(Me.tablerepGeneralLedger.CmpidColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCmpidNull()
            Me(Me.tablerepGeneralLedger.CmpidColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnameNull() As Boolean
            Return Me.IsNull(Me.tablerepGeneralLedger.UnameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnameNull()
            Me(Me.tablerepGeneralLedger.UnameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVou_dateNull() As Boolean
            Return Me.IsNull(Me.tablerepGeneralLedger.Vou_dateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVou_dateNull()
            Me(Me.tablerepGeneralLedger.Vou_dateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCh_issue_dateNull() As Boolean
            Return Me.IsNull(Me.tablerepGeneralLedger.Ch_issue_dateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCh_issue_dateNull()
            Me(Me.tablerepGeneralLedger.Ch_issue_dateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCh_dateNull() As Boolean
            Return Me.IsNull(Me.tablerepGeneralLedger.Ch_dateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCh_dateNull()
            Me(Me.tablerepGeneralLedger.Ch_dateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBalanceNull() As Boolean
            Return Me.IsNull(Me.tablerepGeneralLedger.BalanceColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBalanceNull()
            Me(Me.tablerepGeneralLedger.BalanceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class repGeneralLedgerRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As repGeneralLedgerRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As repGeneralLedgerRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As repGeneralLedgerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace BankBookTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class repGeneralLedgerTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "repGeneralLedger"
            tableMapping.ColumnMappings.Add("Cmpid", "Cmpid")
            tableMapping.ColumnMappings.Add("Uname", "Uname")
            tableMapping.ColumnMappings.Add("Entry_id", "Entry_id")
            tableMapping.ColumnMappings.Add("Vou_no", "Vou_no")
            tableMapping.ColumnMappings.Add("Vou_type", "Vou_type")
            tableMapping.ColumnMappings.Add("Vou_date", "Vou_date")
            tableMapping.ColumnMappings.Add("Acc_head_code", "Acc_head_code")
            tableMapping.ColumnMappings.Add("Acc_head", "Acc_head")
            tableMapping.ColumnMappings.Add("dramt", "dramt")
            tableMapping.ColumnMappings.Add("cramt", "cramt")
            tableMapping.ColumnMappings.Add("Pay_mode", "Pay_mode")
            tableMapping.ColumnMappings.Add("Cheque_no", "Cheque_no")
            tableMapping.ColumnMappings.Add("Narration", "Narration")
            tableMapping.ColumnMappings.Add("Group_name", "Group_name")
            tableMapping.ColumnMappings.Add("Sub_group_name", "Sub_group_name")
            tableMapping.ColumnMappings.Add("Ch_issue_date", "Ch_issue_date")
            tableMapping.ColumnMappings.Add("Ch_date", "Ch_date")
            tableMapping.ColumnMappings.Add("Balance", "Balance")
            tableMapping.ColumnMappings.Add("trans_id", "trans_id")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[repGeneralLedger] ([Cmpid], [Uname], [Entry_id], [Vou_no], [Vo"& _ 
                "u_type], [Vou_date], [Acc_head_code], [Acc_head], [dramt], [cramt], [Pay_mode], "& _ 
                "[Cheque_no], [Narration], [Group_name], [Sub_group_name], [Ch_issue_date], [Ch_d"& _ 
                "ate], [Balance]) VALUES (@Cmpid, @Uname, @Entry_id, @Vou_no, @Vou_type, @Vou_dat"& _ 
                "e, @Acc_head_code, @Acc_head, @dramt, @cramt, @Pay_mode, @Cheque_no, @Narration,"& _ 
                " @Group_name, @Sub_group_name, @Ch_issue_date, @Ch_date, @Balance)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Cmpid", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Cmpid", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Uname", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Uname", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Entry_id", System.Data.SqlDbType.BigInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Entry_id", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Vou_no", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Vou_no", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Vou_type", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Vou_type", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Vou_date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Vou_date", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Acc_head_code", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Acc_head_code", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Acc_head", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Acc_head", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@dramt", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "dramt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@cramt", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "cramt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Pay_mode", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Pay_mode", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Cheque_no", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Cheque_no", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Narration", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Narration", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Group_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Group_name", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Sub_group_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Sub_group_name", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Ch_issue_date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Ch_issue_date", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Ch_date", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "Ch_date", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Balance", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 18, 2, "Balance", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            'Me._connection.ConnectionString = Global.PhoenixGroups.My.MySettings.Default.RagaGroupConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Cmpid, Uname, Entry_id, Vou_no, Vou_type, Vou_date, Acc_head_code, Acc_hea"& _ 
                "d, dramt, cramt, Pay_mode, Cheque_no, Narration, Group_name, Sub_group_name, Ch_"& _ 
                "issue_date, Ch_date, Balance, trans_id FROM dbo.repGeneralLedger"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BankBook.repGeneralLedgerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BankBook.repGeneralLedgerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BankBook.repGeneralLedgerDataTable = New BankBook.repGeneralLedgerDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As BankBook.repGeneralLedgerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As BankBook) As Integer
            Return Me.Adapter.Update(dataSet, "repGeneralLedger")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Cmpid As String,  _
                    ByVal Uname As String,  _
                    ByVal Entry_id As Long,  _
                    ByVal Vou_no As String,  _
                    ByVal Vou_type As String,  _
                    ByVal Vou_date As System.Nullable(Of Date),  _
                    ByVal Acc_head_code As String,  _
                    ByVal Acc_head As String,  _
                    ByVal dramt As Decimal,  _
                    ByVal cramt As Decimal,  _
                    ByVal Pay_mode As String,  _
                    ByVal Cheque_no As String,  _
                    ByVal Narration As String,  _
                    ByVal Group_name As String,  _
                    ByVal Sub_group_name As String,  _
                    ByVal Ch_issue_date As System.Nullable(Of Date),  _
                    ByVal Ch_date As System.Nullable(Of Date),  _
                    ByVal Balance As System.Nullable(Of Decimal)) As Integer
            If (Cmpid Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Cmpid,String)
            End If
            If (Uname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Uname,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Entry_id,Long)
            If (Vou_no Is Nothing) Then
                Throw New System.ArgumentNullException("Vou_no")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Vou_no,String)
            End If
            If (Vou_type Is Nothing) Then
                Throw New System.ArgumentNullException("Vou_type")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Vou_type,String)
            End If
            If (Vou_date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Vou_date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Acc_head_code Is Nothing) Then
                Throw New System.ArgumentNullException("Acc_head_code")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Acc_head_code,String)
            End If
            If (Acc_head Is Nothing) Then
                Throw New System.ArgumentNullException("Acc_head")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Acc_head,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(dramt,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(cramt,Decimal)
            If (Pay_mode Is Nothing) Then
                Throw New System.ArgumentNullException("Pay_mode")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Pay_mode,String)
            End If
            If (Cheque_no Is Nothing) Then
                Throw New System.ArgumentNullException("Cheque_no")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Cheque_no,String)
            End If
            If (Narration Is Nothing) Then
                Throw New System.ArgumentNullException("Narration")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Narration,String)
            End If
            If (Group_name Is Nothing) Then
                Throw New System.ArgumentNullException("Group_name")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Group_name,String)
            End If
            If (Sub_group_name Is Nothing) Then
                Throw New System.ArgumentNullException("Sub_group_name")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Sub_group_name,String)
            End If
            If (Ch_issue_date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Ch_issue_date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (Ch_date.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Ch_date.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Balance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Balance.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
